import sys, os
sys.path.append(os.pardir)
import numpy as np
import matplotlib.pyplot as plt
import time
from numpy.random import *
from dataset.mnist import load_mnist
from PIL import Image
from numba import jit
(x_train, t_train), (x_test, t_test) = \
    load_mnist(flatten=True, normalize=True)
print(x_train.shape)    

def img_show(img):
    pil_img = Image.fromarray(np.uint8(img))
    plt.imshow(img,vmin = 0, cmap = 'gray',vmax = 1,interpolation = 'none')
    plt.show()
som_size = 20
for i in range(0,10):
    t = np.where(t_train == i)
    if i == 0:
        x = x_train[t[0][0:som_size*(som_size//10)]]
        print(x.shape)        
    else:
        x = np.append(x,x_train[t[0][0:som_size*(som_size//10)]],axis = 0)
print(x.shape)    
np.random.shuffle(x)
img = x[99]
label = t_train[0]
img = img.reshape(28,28)
img_show(img)
print(img[27])

som_size = 11
for i in range(1,som_size):
    n = np.array([i]*som_size)
    if i == 1:
        ni = np.array([0]*som_size)
    ni = np.append(ni,n)
M = np.array([[i for i in range(0,som_size)]*som_size])
r = np.hstack((M.reshape(som_size**2,1),ni.reshape(som_size**2,1)))
q = np.random.rand(som_size**2,som_size**2)
for i in range(0,som_size**2):
    for j in range(0,som_size**2):
        q[i][j] = np.linalg.norm(r[i]-r[j])
        
m = np.random.rand(som_size**2, 784) 
N = 10001
c = np.array(([3000]*N))
def som(x,som_size,r,c,m):
 
    for i in range(0,N):
        alpha = 0.2
        sigma = 0.8
        alpha2 = 0.5*(1.0-i/N)+0.1
        sigma2 = 6*(1.0-i/N)
        xi = randint(400)
        X = 3000.00000000000
        c_x = np.array(([X]*som_size**2))
        for c_i in range(0,som_size**2):
            c_x[c_i] = np.linalg.norm(x[xi]-m[c_i])
        c[i] = np.argmin(c_x)    
        if i % 1000 == 0:
            for im in range(0,som_size):
                for ix in range(som_size*im,som_size*(im+1)):
                    if ix % som_size == 0:
                        img_h = m[ix].reshape(28,28)
                    else:    
                        img_h= np.concatenate((img_h,m[ix].reshape(28,28)), axis = 1)
                if im == 0:
                    img = img_h
                else:
                    img = np.concatenate((img,img_h), axis = 0)
            print(img.shape)
            plt.axis("off")
            pil_img = Image.fromarray(np.uint8(img))
            plt.imshow(img,vmin = 0, cmap = 'gray',vmax = 1,interpolation = 'none')
            plt.savefig('2DsomMNIST%d.png' % i,dpi=200)
            plt.title('i=' + str(i))
            plt.show()
        
        else:
            for m_i in range(0,som_size**2):
                m_x = m[m_i] + alpha2 * np.exp(-(np.linalg.norm(r[c[i]]-r[m_i]))**2/((2*sigma2)**2))*(x[xi] - m[m_i])
                m[m_i] = m_x
    return m,c
start = time.time()
m,c = som(x,som_size,r,c,m)
elapsed_time = time.time() - start
print ("elapsed_time:{0}".format(elapsed_time) + "[sec]")

print(c[5])
plt.hist(c,bins=100,rwidth=0.8)
plt.show()
