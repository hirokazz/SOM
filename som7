from PIL import Image
import numpy as np
from numpy.random import *
import matplotlib.pyplot as plt
import time
import os
import re

path = "Photos/"
pattern = ".*\.(jpg)"
files = [f for f in os.listdir(path) if re.search(pattern, f, re.IGNORECASE)] # 大小文字無視
f = np.array(files)
print(f[99])
x = randint(0,256,(100,360,640,3),dtype=np.uint8)
for i in range(0,100):
    x[i] = np.array(Image.open("Photos/"+'/'+f[i]))

print(x.shape, x.dtype)
Image.fromarray(x[2])
som_size = 10
t = 1001
for i in range(1,som_size):
    n = np.array([i]*som_size)
    if i == 1:
        ni = np.array([0]*som_size)
    ni = np.append(ni,n)
M = np.array([[i for i in range(0,som_size)]*som_size])
r = np.hstack((M.reshape(som_size**2,1),ni.reshape(som_size**2,1)))
m = np.random.permutation(x)
q = np.random.rand(100,100)
for i in range(0,100):
    for j in range(0,100):
        q[i][j] = np.linalg.norm(r[i]-r[j])
        
start = time.time()
def som(x,m,r,som_size,t,q):
 
    for i in range(0,t):
        alpha = 0.2
        sigma = 0.8
        alpha2 = 0.4*(1.0-i/t)+0.3
        sigma2 = 1.7*(1.0-i/t)
        X = 300000
        c_x = np.array(([X]*400))
        for c_i in range(0,som_size**2):
            c_x[c_i] = np.linalg.norm(x[i%100]-m[c_i])
        c = np.argmin(c_x)
        if i % 50 == 0:
            for im in range(0,som_size):
                for ix in range(som_size*im,som_size*(im+1)):
                    if ix % som_size == 0:
                        img_h = m[ix]
                    else:    
                        img_h= np.concatenate((img_h,m[ix]), axis = 1)
                if im == 0:
                    img = img_h
                else:
                    img = np.concatenate((img,img_h), axis = 0) 
               
            plt.figure(figsize=(8,6))
            plt.axis("off")
            plt.title('i=' + str(i))
            pil_img = Image.fromarray(np.uint8(img))
            plt.imshow(pil_img)
            plt.savefig('som_picture6%d.png' % i,dpi=300,bbox_inches='tight')
            plt.show()
            
        else:                                      
            q2 = np.where(q[c] < sigma2) 
            m_x = m[q2[0]] + alpha2 * np.exp(-(np.linalg.norm(r[c]-r[q2[0]]))**2/(2*sigma2**2))*(x[i%100] - m[q2[0]])
            m[q2[0]] = m_x
    return m                
m = som(x,m,r,som_size,t,q)
elapsed_time = time.time() - start
print ("elapsed_time:{0}".format(elapsed_time) + "[sec]")        
