from PIL import Image
import numpy as np
from numpy.random import *
import matplotlib.pyplot as plt
import time

a  = np.array(Image.open('a.jpg'))
b  = np.array(Image.open('b.jpg'))
c  = np.array(Image.open('c.jpg'))
d  = np.array(Image.open('d.jpg'))

som_size = 10
for i in range(1,som_size):
    if i <= som_size/2:
        n = np.array([i]*som_size)
    else:
        n = np.array([som_size-i]*som_size)
    if i == 1:
        ni = np.array([0]*som_size)
    ni = np.append(ni,n)
M = np.array([i for i in range(0,som_size//2+1)]) 
M2 =np.array([i for i in range(1,som_size//2)])[::-1]
M = np.append(M,M2)
M = np.array([[M]*som_size])
r = np.hstack((M.reshape(som_size**2,1),ni.reshape(som_size**2,1)))
x = np.array((a,b,c,d))
m = randint(0,256,(100,360,640,3),dtype=np.uint8)
start = time.time()
def som(x,m,r):
 
    for i in range(0,1001):
        alpha = 0.2
        sigma = 0.8
        alpha2 = 0.1*(1.0-i/1001)+0.1
        sigma2 = 3.0*(1.0-i/1001)+0.1
        X = 300000
        c_x = np.array(([X]*400))
        for c_i in range(0,100):
            c_x[c_i] = np.linalg.norm(x[i%4]-m[c_i])
        c = np.argmin(c_x)
        if i % 50 == 0:
            for im in range(0,10):
                for ix in range(10*im,10*(im+1)):
                    if ix % 10 == 0:
                        img_h = m[ix]
                    else:    
                        img_h= np.concatenate((img_h,m[ix]), axis = 1)
                if im == 0:
                    img = img_h
                else:
                    img = np.concatenate((img,img_h), axis = 0) 
               
            plt.figure(figsize=(8,6))
            plt.axis("off")
            plt.title('i=' + str(i))
            pil_img = Image.fromarray(np.uint8(img))
            plt.imshow(pil_img)
            plt.savefig('som4_picture%d.png' % i,dpi=300,bbox_inches='tight')
            plt.show()
            
        else:                                      
            for m_i in range(0,100):
                m_x = m[m_i] + alpha2 * np.exp(-(np.linalg.norm(r[c]-r[m_i]))**2/(2*sigma2**2))*(x[i%4] - m[m_i])
                m[m_i] = m_x
    return m                
m = som(x,m,r)
elapsed_time = time.time() - start
print ("elapsed_time:{0}".format(elapsed_time) + "[sec]")
