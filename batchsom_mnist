import sys, os
sys.path.append(os.pardir)
import numpy as np
import matplotlib.pyplot as plt
import time
from numpy.random import *
from dataset.mnist import load_mnist
from PIL import Image
(x_train, t_train), (x_test, t_test) = \
    load_mnist(flatten=True, normalize=True)
    
som_size =10
batch = 500
m = np.random.rand(som_size**2, 784) 
#x = rand(2,som_size**2)
c = np.array(([3000]*batch))

for i in range(1,som_size):
    if i <= som_size/2:
        n = np.array([i]*som_size)
    else:
        n = np.array([som_size-i]*som_size)
    if i == 1:
        ni = np.array([0]*som_size)
    ni = np.append(ni,n)
M = np.array([i for i in range(0,som_size//2+1)]) 
M2 =np.array([i for i in range(1,som_size//2)])[::-1]
M = np.append(M,M2)
M = np.array([[M]*som_size])
r = np.hstack((M.reshape(som_size**2,1),ni.reshape(som_size**2,1)))
start = time.time()
def som(x_train,batch,r,m,c,som_size):
    x2 = x_train[randint(0,60000,batch)]
    for i in range(0,5001):
        #alpha = 0.2
        sigma2 = (1.5-0.1)*np.exp(-i/5000) +0.1
        #alpha2 = 0.5*(1.0-i/3001)
        #sigma2 = 0.01
        
        if i%batch != 0 or i == 0:
            c_x = np.ones(som_size**2)
            for c_i in range(0,som_size**2):
                c_x[c_i] = np.linalg.norm(m[c_i]-x2[i%batch])
            c[i%batch] = np.argmin(c_x)
            if i  == 0:
                for im in range(0,9):
                    for ix in range(10*im,10*(im+1)):
                        if ix % 10 == 0:
                            img_h = m[ix].reshape(28,28)
                        else:    
                            img_h= np.concatenate((img_h,m[ix].reshape(28,28)), axis = 1)
                    if im == 0:
                        img = img_h
                    else:
                        img = np.concatenate((img,img_h), axis = 0)
                        
                pil_img = Image.fromarray(np.uint8(img))
                plt.imshow(img,vmin = 0, cmap = 'gray',vmax = 1,interpolation = 'none')
                plt.savefig('batchsomMNIST%d.png' % i)
                plt.title('i=' + str(i))
                plt.show()
        else:
            
            for m_k in range(0,som_size**2):
                
                m_x = np.array([0]*784)
                m_y = np.array([0]*784)
                
                for m_i in range(0,batch):
                    c_j = c[m_i]
                    m_x = m_x + np.exp(-(np.linalg.norm(r[c_j]-r[m_k]))**2/(2*sigma2**2))*x2[m_i]
                    m_y = m_y + np.exp(-(np.linalg.norm(r[c_j]-r[m_k]))**2/(2*sigma2**2))
                m[m_k] = m_x/m_y
            for im in range(0,9):
                for ix in range(10*im,10*(im+1)):
                    if ix % 10 == 0:
                        img_h = m[ix].reshape(28,28)
                    else:    
                        img_h= np.concatenate((img_h,m[ix].reshape(28,28)), axis = 1)
                if im == 0:
                    img = img_h
                else:
                    img = np.concatenate((img,img_h), axis = 0)
                        
            pil_img = Image.fromarray(np.uint8(img))
            plt.imshow(img,vmin = 0, cmap = 'gray',vmax = 1,interpolation = 'none')
            plt.savefig('batchsomMNIST%d.png' % i)
            plt.title('i=' + str(i))
            plt.show()
            
            x2 = x_train[randint(0,60000,batch)]
           
    return m                    
m = som(x_train,batch,r,m,c,som_size)
elapsed_time = time.time() - start
print ("elapsed_time:{0}".format(elapsed_time) + "[sec]")    
