import sys, os
sys.path.append(os.pardir)
import numpy as np
import matplotlib.pyplot as plt
from dataset.mnist import load_mnist
from PIL import Image

(x_train, t_train), (x_test, t_test) = \
    load_mnist(flatten=True, normalize=True)
    
def img_show(img):
    pil_img = Image.fromarray(np.uint8(img))
    plt.imshow(img,vmin = 0, cmap = 'gray',vmax = 1,interpolation = 'none')
    plt.show()
    
img = x_train[0]
label = t_train[0]
img = img.reshape(28,28)
img_show(img)
print(x_train[0].shape)

for i in range(1,10):
    n = np.array([i]*10)
    if i == 1:
        ni = np.array([0]*10)
    ni = np.append(ni,n)
M = np.array([[i for i in range(0,10)]*10])
r = np.hstack((M.reshape(100,1),ni.reshape(100,1)))

def Gaussian(x): 
    sigma = 1
    mean = 1
    y = (1 / np.sqrt(2 * np.pi * sigma))*(np.exp((-(x - mean)**2)/( 2 * sigma ) ))
    return y

m = np.random.rand(100, 784) 

def som(x_train,r,m):
 
    for i in range(0,10001):
        alpha = 0.2
        sigma = 0.8
        alpha2 = 0.3*(1.0-i/10001)+0.01
        sigma2 = 2.0*(1.0-i/10001)+0.1
        x = x_train[i].reshape(784,1)
        X = 3000
        for c_i in range(0,100):
            c_x = np.linalg.norm(m[c_i].reshape(784,1)-x)

            if X > c_x:
                X = c_x
                c = c_i
            
    
        if i % 1000 == 0:
            for im in range(0,9):
                for ix in range(10*im,10*(im+1)):
                    if ix % 10 == 0:
                        img_h = m[ix].reshape(28,28)
                    else:    
                        img_h= np.concatenate((img_h,m[ix].reshape(28,28)), axis = 1)
                if im == 0:
                    img = img_h
                else:
                    img = np.concatenate((img,img_h), axis = 0)
                        
            pil_img = Image.fromarray(np.uint8(img))
            plt.imshow(img,vmin = 0, cmap = 'gray',vmax = 1,interpolation = 'none')
            plt.savefig('somMNIST%d.png' % i)
            plt.show()
        
        else:    
            for m_i in range(0,100):
                m_x = m[m_i].reshape(784,1) + alpha2 * np.exp(-(np.linalg.norm(r[c]-r[m_i]))**2/2*sigma2**2)*(x - m[m_i].reshape(784,1))
                m[m_i] = m_x.reshape(1,784)
som(x_train,r,m)
