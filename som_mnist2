import sys, os
sys.path.append(os.pardir)
import numpy as np
import matplotlib.pyplot as plt
import time
from numpy.random import *
from dataset.mnist import load_mnist
from PIL import Image
(x_train, t_train), (x_test, t_test) = \
    load_mnist(flatten=True, normalize=True)
print(x_train.shape)    

def img_show(img):
    pil_img = Image.fromarray(np.uint8(img))
    plt.imshow(img,vmin = 0, cmap = 'gray',vmax = 1,interpolation = 'none')
    plt.show()

for i in range(0,10):
    t = np.where(t_train == i)
    if i == 0:
        x = x_train[t[0][0:som_size*2]]
        print(x.shape)        
    else:
        x = np.append(x,x_train[t[0][0:som_size*2]],axis = 0)
print(x.shape)    
np.random.shuffle(x)
img = x[99]
label = t_train[0]
img = img.reshape(28,28)
img_show(img)
print(img[27])

som_size = 20
for i in range(1,som_size):
    n = np.array([i]*som_size)
    if i == 1:
        ni = np.array([0]*som_size)
    ni = np.append(ni,n)
M = np.array([[i for i in range(0,som_size)]*som_size])
r = np.hstack((M.reshape(som_size**2,1),ni.reshape(som_size**2,1)))
q = np.random.rand(som_size**2,som_size**2)
for i in range(0,som_size**2):
    for j in range(0,som_size**2):
        q[i][j] = np.linalg.norm(r[i]-r[j])
        
#tros        
som_size = 10
for i in range(1,som_size):
    if i <= som_size/2:
        n = np.array([i]*som_size)
    else:
        n = np.array([som_size-i]*som_size)
    if i == 1:
        ni = np.array([0]*som_size)
    ni = np.append(ni,n)
M = np.array([i for i in range(0,som_size//2+1)]) 
M2 =np.array([i for i in range(1,som_size//2)])[::-1]
M = np.append(M,M2)
M = np.array([[M]*som_size])
r = np.hstack((M.reshape(som_size**2,1),ni.reshape(som_size**2,1)))   

m = np.random.rand(som_size**2, 784) 
start = time.time()
def som(x,som_size,r,m,q):
 
    for i in range(0,10001):
        alpha = 0.2
        sigma = 0.8
        alpha2 = 0.5*(1.0-i/10001)+0.1
        sigma2 = 5.5*(1.0-i/10001)    
        X = 3000
        c_x = np.array(([X]*som_size**2))
        for c_i in range(0,som_size**2):
            c_x[c_i] = np.linalg.norm(x[i%som_size**2]-m[c_i])
        c = np.argmin(c_x)    
        if i % 1000 == 0:
            for im in range(0,som_size):
                for ix in range(som_size*im,som_size*(im+1)):
                    if ix % som_size == 0:
                        img_h = m[ix].reshape(28,28)
                    else:    
                        img_h= np.concatenate((img_h,m[ix].reshape(28,28)), axis = 1)
                if im == 0:
                    img = img_h
                else:
                    img = np.concatenate((img,img_h), axis = 0)
            print(img.shape)
            plt.axis("off")
            pil_img = Image.fromarray(np.uint8(img))
            plt.imshow(img,vmin = 0, cmap = 'gray',vmax = 1,interpolation = 'none')
            #plt.savefig('30somMNIST%d.png' % i,dpi=200)
            plt.title('i=' + str(i))
            plt.show()
        
        else:
            q2 = np.where(q[c] < sigma2) 
            for m_i in range(0,q2[0].size):
                m_x = m[q2[0][m_i]] + alpha2 * np.exp(-(np.linalg.norm(r[c]-r[q2[0][m_i]]))**2/((2*sigma2)**2))*(x[i%som_size**2] - m[q2[0][m_i]])
                m[q2[0][m_i]] = m_x
    return m
m = som(x,som_size,r,m,q)
elapsed_time = time.time() - start
print ("elapsed_time:{0}".format(elapsed_time) + "[sec]")

q2 = np.random.rand(som_size**2,som_size**2)
for i in range(0,som_size**2):
    for j in range(0,som_size**2):
        q2[i][j] = np.linalg.norm(m[i]-m[j])
Z = np.random.rand(som_size*2)
Z2 = np.random.rand(som_size*2)
for k in range(0,som_size):
    for i in range(0,som_size+1):
        if i == 0:
            Z[i*2] = 0   
        elif i == som_size:
            Z[i*2-1] = 0
        else:
            Z[i*2-1] = q2[som_size*k+i-1][som_size*k+i]
            Z[i*2] = q2[som_size*k+i-1][som_size*k+i]
    for j in range(0,som_size):
        if k != som_size-1:
            Z2[j*2] = q2[som_size*k+j][som_size*k+j+som_size]
            Z2[j*2+1] = q2[som_size*k+j][som_size*k+j+som_size] 
    if k == 0:
        Z3 =np.hstack((Z,Z2))
    elif k == som_size-1:
        Z3 =np.hstack((Z3,Z))
    else:    
        Z3 =np.hstack((Z3,Z))
        Z3 =np.hstack((Z3,Z2))
print(Z3.reshape(39,40))

x2 = np.arange(som_size*2+1)[::-1]
y2 = np.arange(som_size*2)[::-1]
X,Y = np.meshgrid(x2, y2)
Z3 = Z3.reshape(som_size*2-1,som_size*2)

plt.pcolormesh(X, Y, Z3,cmap="binary")
plt.colorbar()
plt.show()
